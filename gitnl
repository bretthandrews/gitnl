#!/usr/bin/env python

"""
Git Natural Language Parser

Parse a natural language guess at a git command to select correct git command.

Examples:

    ./gitnl push remote origin to branch brett.

       level    word   pos fine  parent  group
    0      1    push  VERB   VB       0   ROOT
    1      2  remote   ADJ   JJ       3   amod
    2      3  origin  NOUN   NN       1   dobj
    3      4      to   PRT   TO       5    aux
    4      5  branch  VERB   VB       1  xcomp
    5      6   brett  NOUN   NN       5   dobj

    push VB ROOT
     +-- origin NN dobj
     |   +-- remote JJ amod
     +-- to TO prep
         +-- brett NN pobj
             +-- branch VB nn
"""

from __future__ import print_function, division, absolute_import

import os
import sys
from subprocess import Popen, PIPE, STDOUT
import fnmatch
import numpy as np
import pandas as pd


def get_git_commands():
    all_cmds = {}
    for fname in os.listdir(os.getenv('GITDOCS')):
        if fnmatch.fnmatch(fname, 'git-*.txt'):
            cmd = fname.split('git-')[1].split('.txt')[0]
            cmd = ' '.join(cmd.split('-'))
            # TODO open fname and read synopsis with syntax
            # syntax = 
            # all_cmds[cmd] = syntax
    return all_cmds

git_syntax = dict(push='git push <remote> <branch>')



def parse_to_git(args):
    """
    returns a string with what should be passed to git.  E.g.,
    "push remotename branchname"
    """
    print(args)
    ind_prep = np.atleast_1d(np.array(args[args['pos'] == 'PRT']['level']))
    if len(ind_prep) == 0:
        print('No preposition found')
    elif len(ind_prep) > 1:
        print('Multiple prepositions found')
    action = args[args['group'] == 'ROOT']['word'].ix[0]
    others = args[args['pos'] == 'NOUN']
    others1 = others[others['parent'] < ind_prep[0]]
    others2 = others[others['parent'] > ind_prep[0]]

    kwargs = dict(action=action, args1=others1['word'].tolist(), args2=others2['word'].tolist())
    cmds = []
    for a2 in kwargs['args2']:
        for a1 in kwargs['args1']:
            cmds.append('{0} {1} {2}'.format(action, a1, a2))
    print('kwargs', kwargs)
    return cmds


if __name__ == '__main__':
    allargs = ' '.join(sys.argv[1:])

    path_tf = os.path.join(os.getenv('TENSORFLOW_DIR'), 'syntaxnet')
    path_gitnl = os.path.join(os.getenv('GITNL_DIR'))

    # could not get tensorflow working from other directories, so change into its directory
    cwd = os.getcwd()
    os.chdir(path_tf)

    try:
        # Use a modified version of the tensorflow demo script that prints conll format instead of
        # asiitree.
        demo_file = os.path.join(path_gitnl, 'demo.sh')
    except NameError:
        demo_file = os.path.join(path_tf, 'syntaxnet', 'demo.sh')

    phrase = allargs
    bash_cmd = 'echo {0} | {1}'.format(phrase, demo_file)
    pp = Popen(bash_cmd, shell=True, stdout=PIPE, stderr=STDOUT)
    out = pp.communicate()[0]
    out_split = out.split('\n')
    for i, it in enumerate(out_split):
        if it[0] == '1':
            ind = i
            break

    os.chdir(cwd)

    # need better way to cut off trailing useless rows
    colln_tabbed = out_split[ind:-2]
    colln = [it.split('\t') for it in colln_tabbed]
    columns = ['level', 'word', 'ig1', 'pos', 'fine', 'ig2', 'parent', 'group', 'ig3', 'ig4']

    raw = pd.DataFrame(colln, columns=columns)
    useful_cols = ['level', 'word', 'pos', 'fine', 'parent', 'group']
    hier = raw[useful_cols]
    hier['level'] = pd.to_numeric(hier['level'])
    hier['parent'] = pd.to_numeric(hier['parent'])

    gitcmds = parse_to_git(hier)

    prompt = 'Options:\n'
    for i, cmd in enumerate(gitcmds):
        prompt += '( {0} ) git {1}\n'.format(i, cmd)

    prompt += 'or type "q" to quit.\n\n'

    # returns NameError when input is 'q' instead of quitting (see if statement below for desired
    # behavior)
    try:
        res = input(prompt)
    except NameError:
        sys.exit(1)

    if res in ['q', 'Q', 'quit', 'Quit']:
        sys.exit(1)

    # Need to generalize so that this script can be run from on any repo.
    # gitpath = check_output(['which', 'git']).decode()
    # command = gitpath.strip() + ' ' + gitcmds.strip()
    command = 'git {}'.format(gitcmds[res])
    print('Doing this command: "{}"'.format(command))
    sys.exit(os.system(command))
