#!/usr/bin/env python

"""
Git Natural Language Parser

Parse a natural language guess at a git command to select correct git command.

Examples:

    ./gitnl push remote origin to branch brett.

       level    word   pos fine  parent  group
    0      1    push  VERB   VB       0   ROOT
    1      2  remote   ADJ   JJ       3   amod
    2      3  origin  NOUN   NN       1   dobj
    3      4      to   PRT   TO       5    aux
    4      5  branch  VERB   VB       1  xcomp
    5      6   brett  NOUN   NN       5   dobj

    push VB ROOT
     +-- origin NN dobj
     |   +-- remote JJ amod
     +-- to TO prep
         +-- brett NN pobj
             +-- branch VB nn
"""

from __future__ import print_function, division, absolute_import

import os
import sys
from subprocess import Popen, PIPE, STDOUT
import fnmatch
import numpy as np
import pandas as pd


def get_synopsis(filename):
    with open(filename, 'r') as fin:
        synopsis = []
        read = False
        start = None
        for i, line in enumerate(fin):
            if 'SYNOPSIS' in line:
                start = i + 3
            elif 'DESCRIPTION' in line:
                read = False
            elif i == start:
                read = True
            if read:
                synopsis.append(line)
    return synopsis


def get_git_commands():
    all_cmds = {}
    for fname in os.listdir(os.getenv('GITDOCS')):
        if fnmatch.fnmatch(fname, 'git-*.txt'):
            cmd = fname.split('git-')[1].split('.txt')[0]
            if cmd[-1] == '\n':
                cmd = cmd[:-1]
            all_cmds[cmd] = get_synopsis(os.path.join(os.getenv('GITDOCS'), fname))
    return all_cmds


def list_git_commands(git_synopsis):
    srt = sorted(git_synopsis.keys())
    n_keys = len(srt)
    n_rows = np.ceil(n_keys / 3).astype(int)
    cmds = ''
    for ii in range(n_rows):
        left = '{}'.format(srt[ii])
        center = '{}'.format(srt[n_rows + ii])
        right = '{}'.format(srt[(n_rows * 2) + ii])
        cmds = ''.join((cmds, '{0:24} {1:24} {2:24}\n'.format(left, center, right)))
    return cmds


def set_command(hier, git_synopsis):
    """Set the git command.

    First cross-match with the list of git commands. If that fails, then use the ROOT word.

    Args:
        hier (DataFrame): Sentence hierarchy.
        git_synopsis (dict): Git command synopses.

    Returns:
        str
    """
    # try matching each word to the list of git commands
    action = None
    for kk in git_synopsis.keys():
        for word in hier['word']:
            if word == kk:
                action = word
                break
    try:
        if action is None:
            cmds = list_git_commands(git_synopsis)
            raise ValueError('\nNone of the words match any valid git command:\n\n{}'.format(cmds))
    except ValueError as ee:
        print(ee.message)
        sys.exit(1)
    return action


def get_required_args(action, git_synopsis):
    """
    """
    synopsis = ''.join(git_synopsis[action])
    required_args = []
    sq_bracket = False
    ang_bracket = False
    for ch in synopsis:
        if ch == '[':
            sq_bracket = True
        elif ch == ']':
            sq_bracket = False

        if not sq_bracket:
            if ch == '<':
                ang_bracket = True
                arg = ''

            if ang_bracket:
                arg = ''.join((arg, ch))

            if ch == '>':
                ang_bracket = False
                required_args.append(arg)

    return required_args


def parse_to_git(hier, git_synopsis):
    """Returns a string with what should be passed to git.

    e.g., 'push remotename branchname'

    Args:
        hier (DataFrame): Sentence hierarchy.
        git_synopsis (dict): Git command synopses.

    Returns:
        str
    """
    # try not relying on a preposition
    # ind_prep = np.atleast_1d(np.array(hier[hier['pos'] == 'PRT']['level']))
    # if len(ind_prep) == 0:
    #     print('No preposition found')
    # elif len(ind_prep) > 1:
    #     print('Multiple prepositions found')
    # others1 = others[others['parent'] < ind_prep[0]]
    # others2 = others[others['parent'] > ind_prep[0]]

    action = set_command(hier, git_synopsis)
    nouns = hier[hier['pos'] == 'NOUN']

    # try to get required args from docs
    required_args = get_required_args(action, git_synopsis)

    required_cmd = '{0} {1}'.format('git', action)
    if len(required_args) > 0:
        for it in required_args:
            required_cmd = ' '.join((required_cmd, it))
    
    print('\nsyntax:  {}\n'.format(required_cmd))

    kwargs = dict(action=action)
    cmds = []
    # for a2 in kwargs['args2']:
    #     for a1 in kwargs['args1']:
    cmds.append('{0}'.format(action))
    return cmds


if __name__ == '__main__':
    allargs = ' '.join(sys.argv[1:])

    path_tf = os.path.join(os.getenv('TENSORFLOW_DIR'), 'syntaxnet')
    path_gitnl = os.path.join(os.getenv('GITNL_DIR'))

    # could not get tensorflow working from other directories, so change into its directory
    cwd = os.getcwd()
    os.chdir(path_tf)

    try:
        # Use a modified version of the tensorflow demo script that prints conll format instead of
        # asiitree.
        demo_file = os.path.join(path_gitnl, 'demo.sh')
    except NameError:
        demo_file = os.path.join(path_tf, 'syntaxnet', 'demo.sh')

    phrase = allargs
    bash_cmd = 'echo {0} | {1}'.format(phrase, demo_file)
    pp = Popen(bash_cmd, shell=True, stdout=PIPE, stderr=STDOUT)
    out = pp.communicate()[0]
    out_split = out.split('\n')
    for i, it in enumerate(out_split):
        if it[0] == '1':
            ind = i
            break

    os.chdir(cwd)

    # need better way to cut off trailing useless rows
    colln_tabbed = out_split[ind:-2]
    colln = [it.split('\t') for it in colln_tabbed]
    columns = ['level', 'word', 'ig1', 'pos', 'fine', 'ig2', 'parent', 'group', 'ig3', 'ig4']

    raw = pd.DataFrame(colln, columns=columns)
    useful_cols = ['level', 'word', 'pos', 'fine', 'parent', 'group']
    hier = raw[useful_cols]
    hier['level'] = pd.to_numeric(hier['level'])
    hier['parent'] = pd.to_numeric(hier['parent'])

    print('\nHierarchy:\n\n{}'.format(hier))
    git_synopsis = get_git_commands()
    gitcmds = parse_to_git(hier, git_synopsis)

    prompt = 'Options:\n'
    for i, cmd in enumerate(gitcmds):
        prompt += '( {0} ) git {1}\n'.format(i, cmd)

    prompt += 'or type "q" to quit.\n\n'

    # returns NameError when input is 'q' instead of quitting (see if statement below for desired
    # behavior)
    try:
        res = input(prompt)
    except NameError:
        sys.exit(1)

    if res in ['q', 'Q', 'quit', 'Quit']:
        sys.exit(1)

    # Need to generalize so that this script can be run from on any repo.
    # gitpath = check_output(['which', 'git']).decode()
    # command = gitpath.strip() + ' ' + gitcmds.strip()
    command = 'git {}'.format(gitcmds[res])
    print('Doing this command: "{}"'.format(command))
    sys.exit(os.system(command))
